generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement()) @map("id") @db.Integer
  userName      String        @map("username") @db.VarChar(100)
  avatar        String?       @map("avatar") @db.VarChar(255)
  tokenData     String?       @map("token_data") @db.VarChar(255)
  tokenGg       String?       @map("token_gg") @db.VarChar(255)
  role          UserRole      @default(user) @map("role")
  email         String?       @unique @map("email") @db.VarChar(255)
  notesCount     Int?          @default(0) @map("notes_count") @db.Integer
  noteDetailsCount     Int?          @default(0) @map("note_details_count") @db.Integer
  status        StatusType?   @default(active) @map("status")
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime      @default(now()) @map("updated_at") @db.Timestamp(0)
  notes         Notes[]
  noteDetails   NoteDetails[]

  @@index([role], map: "idx_users_role")
  @@index([status], map: "idx_users_status")
  @@map("users")
}
model Notes {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  label         String        @map("label") @db.VarChar(255)
  status        StatusType    @default(active) @map("status")
  type          NoteType      @default(doc) @map("type")
  parentId      String?       @map("parent_id") @db.Uuid
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime      @default(now()) @map("updated_at") @db.Timestamp(0)
  sorting       Int           @default(autoincrement()) @map("sorting") @db.Integer

  noteDetails   NoteDetails[]

  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  
  parent        Notes?        @relation("NoteChildren", fields: [parentId], references: [id])
  children      Notes[]       @relation("NoteChildren")

  @@index([userId], map: "idx_notes_user_id")
  @@index([parentId], map: "idx_notes_parentId")
  @@map("notes")
  @@unique([id, userId])
}


  model NoteDetails {
    id            Int             @id @default(autoincrement()) @map("id") @db.Integer
    title         String          @map("title") @db.VarChar(100)
    content       String          @map("content") @db.VarChar()
    scheduleTime  DateTime?       @map("schedule_time") @db.Timestamp(0)
    status        StatusType      @default(active) @map("status")
    type          NoteDetailType  @default(string) @map("type")
    createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
    updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamp(0)
    sorting       Int             @default(autoincrement()) @map("sorting") @db.Integer

    noteId        String          @map("note_id") @db.Uuid
    note          Notes           @relation(fields: [noteId], references: [id])

    userId        Int             @map("user_id") @db.Integer
    user          User            @relation(fields: [userId], references: [id])
    
    @@index([noteId], map: "idx_note_details_note_id")
    @@index([userId], map: "idx_note_details_user_id")
    @@map("note_details")
  }

    model Banners {
    id            Int           @id @default(autoincrement()) @map("id") @db.Integer
    title         String        @map("title") @db.VarChar(100)
    url           String        @map("url") @db.VarChar(255)
    @@map("banners")
  }



// ENUM
enum UserRole {
  user
  admin
}

enum StatusType {
  active
  pending
  inactive
  banned
  deleted
}

enum NoteDetailType {
  string
  code
  schedule
}

enum NoteType {
  doc
  folder
  pdf
  pinned
}