name: CI/CD for Turbo Monorepo (Tag-based with Selective Build)

on:
  push:
    tags:
      - "v*"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      users: ${{ steps.filter.outputs.users }}
      notes: ${{ steps.filter.outputs.notes }}
      notifications: ${{ steps.filter.outputs.notifications }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous tag
        id: prev-tag
        run: echo "PREV_TAG=$(git describe --tags --abbrev=0 ${{ github.ref }}^ 2>/dev/null || echo '')" >> $GITHUB_OUTPUT

      - name: Detect changes in apps
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ steps.prev-tag.outputs.PREV_TAG || 'HEAD^' }}
          ref: ${{ github.ref }}
          filters: |
            users: 'apps/users/**'
            notes: 'apps/notes/**'
            notifications: 'apps/notifications/**'

  build-users:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.users == 'true'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build users
        run: npx turbo run build --filter=users

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Tag Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/users-api-image:${{ github.ref_name }} -f apps/users/Dockerfile .
          docker tag ${{ secrets.DOCKER_USERNAME }}/users-api-image:${{ github.ref_name }} ${{ secrets.DOCKER_USERNAME }}/users-api-image:latest

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/users-api-image:${{ github.ref_name }}
          docker push ${{ secrets.DOCKER_USERNAME }}/users-api-image:latest

  build-notes:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.notes == 'true'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Build notes
        run: npx turbo run build --filter=notes
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build & Tag Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/notes-api-image:${{ github.ref_name }} -f apps/notes/Dockerfile .
          docker tag ${{ secrets.DOCKER_USERNAME }}/notes-api-image:${{ github.ref_name }} ${{ secrets.DOCKER_USERNAME }}/notes-api-image:latest
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/notes-api-image:${{ github.ref_name }}
          docker push ${{ secrets.DOCKER_USERNAME }}/notes-api-image:latest

  build-notifications:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.notifications == 'true'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Build notifications
        run: npx turbo run build --filter=notifications
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build & Tag Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/notifications-api-image:${{ github.ref_name }} -f apps/notifications/Dockerfile .
          docker tag ${{ secrets.DOCKER_USERNAME }}/notifications-api-image:${{ github.ref_name }} ${{ secrets.DOCKER_USERNAME }}/notifications-api-image:latest
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/notifications-api-image:${{ github.ref_name }}
          docker push ${{ secrets.DOCKER_USERNAME }}/notifications-api-image:latest

  deploy-users:
    runs-on: ubuntu-latest
    needs: build-users
    if: needs.detect-changes.outputs.users == 'true'
    steps:
      - name: Deploy users-api to Ubuntu Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            mkdir -p ~/${{ secrets.PATH_FLODER }}/${{ secrets.PROJECT }}/users-api
            docker pull ${{ secrets.DOCKER_USERNAME }}/users-api-image:${{ github.ref_name }}
            cd ~/${{ secrets.PATH_FLODER }}/${{ secrets.PROJECT }}/users-api
            export IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/users-api-image:${{ github.ref_name }}"
            docker compose up -d --force-recreate

  deploy-notes:
    runs-on: ubuntu-latest
    needs: build-notes
    if: needs.detect-changes.outputs.notes == 'true'
    steps:
      - name: Deploy notes-api to Ubuntu Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            mkdir -p ~/${{ secrets.PATH_FLODER }}/${{ secrets.PROJECT }}/notes-api
            docker pull ${{ secrets.DOCKER_USERNAME }}/notes-api-image:${{ github.ref_name }}
            cd ~/${{ secrets.PATH_FLODER }}/${{ secrets.PROJECT }}/notes-api
            export IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/notes-api-image:${{ github.ref_name }}"
            docker compose up -d --force-recreate

  deploy-notifications:
    runs-on: ubuntu-latest
    needs: build-notifications
    if: needs.detect-changes.outputs.notifications == 'true'
    steps:
      - name: Deploy notifications-api to Ubuntu Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            mkdir -p ~/${{ secrets.PATH_FLODER }}/${{ secrets.PROJECT }}/notifications-api
            docker pull ${{ secrets.DOCKER_USERNAME }}/notifications-api-image:${{ github.ref_name }}
            cd ~/${{ secrets.PATH_FLODER }}/${{ secrets.PROJECT }}/notifications-api
            export IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/notifications-api-image:${{ github.ref_name }}"
            docker compose up -d --force-recreate